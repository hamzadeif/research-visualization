rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	match /{document=**}{
    	allow read, write: if true;
    }
  }
  	 match /users/{userId} {
    	allow read, write: if true;
    	// allow read: if request.auth.uid == userId;
    	// allow write: if request.auth.uid == userId;
     }
  
    match /incidents/{incidentId} {
    	function isUserRole(role, incidentId) {
      	let user = get(/databases/$(database)/documents/incidents/$(incidentId)/users/$(request.auth.uid));
        return role in user.data.roles;
      }
      
      allow read: if request.auth.uid != null;
      allow write: if request.auth.uid != null && isUserRole("overhead");
      
      match /operationalPeriods/{periodId} {
      	allow read: if request.auth.uid != null;
        allow write: if request.auth.uid != null && isUserRole("overhead");
      }
      
      match /clues/{clueId} {
      	allow read: if request.auth.uid != null && 
        	(isUserRole("overhead") ||
          ((isUserRole("searcher") && request.auth.uid == resource.data.foundBy.id))) ||
          resource.data.private != true;
          
        allow write: if request.auth.uid != null && 
        	(isUserRole("overhead") ||
          (isUserRole("searcher") && request.auth.uid == request.resource.data.foundBy.id));
      }
    }
	}
